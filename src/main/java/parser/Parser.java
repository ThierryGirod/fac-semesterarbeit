
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import scanner.Scanner;
import runtime.*;
import runtime.main.*;
import runtime.wrapper.*;
import runtime.loop.*;
import runtime.function.*;
import runtime.conditional.*;
import runtime.arithmetic.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\005\005\000\002" +
    "\005\007\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\007\003\000\002\013\011\000\002\013\012\000\002" +
    "\017\003\000\002\017\005\000\002\015\006\000\002\015" +
    "\007\000\002\016\007\000\002\014\003\000\002\014\005" +
    "\000\002\020\011\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\016\000\002\012\003\000\002\012" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\030\002\uffff\005\uffff\007\uffff\012\uffff\015" +
    "\uffff\021\uffff\023\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\001\002\000\030\002\000\005\032\007\020\012\021\015" +
    "\010\021\014\023\031\034\007\035\015\036\023\037\030" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\030\006\uffeb\016\uffeb\020\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\001" +
    "\002\000\004\005\127\001\002\000\004\020\ufffb\001\002" +
    "\000\004\020\ufffa\001\002\000\030\006\ufff0\016\ufff0\020" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\001\002\000\024\005\032\007\020\012" +
    "\033\020\ufff8\023\031\034\007\035\034\036\023\037\030" +
    "\001\002\000\026\004\105\005\106\020\ufff2\024\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002" +
    "\000\030\006\uffee\016\uffee\020\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\001\002" +
    "\000\030\006\ufff1\016\ufff1\020\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\001\002" +
    "\000\004\005\071\001\002\000\006\022\065\035\054\001" +
    "\002\000\030\006\uffef\016\uffef\020\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\001" +
    "\002\000\030\006\ufff3\016\ufff3\020\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\001" +
    "\002\000\022\020\ufffd\024\046\026\042\027\043\030\040" +
    "\031\037\032\045\033\044\001\002\000\004\020\064\001" +
    "\002\000\004\020\ufff9\001\002\000\004\020\ufffc\001\002" +
    "\000\030\006\uffd9\016\uffd9\020\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\001\002" +
    "\000\030\006\uffed\016\uffed\020\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\001\002" +
    "\000\022\005\032\007\020\012\033\023\031\034\007\035" +
    "\034\036\023\037\030\001\002\000\004\035\054\001\002" +
    "\000\030\006\ufff2\016\ufff2\020\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002" +
    "\000\024\006\041\024\046\025\036\026\042\027\043\030" +
    "\040\031\037\032\045\033\044\001\002\000\022\005\032" +
    "\007\020\012\033\023\031\034\007\035\034\036\023\037" +
    "\030\001\002\000\022\005\uffdd\007\uffdd\012\uffdd\023\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\001\002\000\022\005" +
    "\uffde\007\uffde\012\uffde\023\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\001\002\000\030\006\ufff4\016\ufff4\020\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\001\002\000\022\005\uffe0\007\uffe0\012\uffe0\023" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\022" +
    "\005\uffdf\007\uffdf\012\uffdf\023\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\001\002\000\022\005\uffdb\007\uffdb\012\uffdb" +
    "\023\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000" +
    "\022\005\uffdc\007\uffdc\012\uffdc\023\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\001\002\000\022\005\032\007\020\012" +
    "\033\023\031\034\007\035\034\036\023\037\030\001\002" +
    "\000\022\005\032\007\020\012\033\023\031\034\007\035" +
    "\034\036\023\037\030\001\002\000\030\006\uffd8\016\uffd8" +
    "\020\uffd8\024\046\025\uffd8\026\042\027\043\030\040\031" +
    "\037\032\045\033\044\001\002\000\030\006\ufff6\016\ufff6" +
    "\020\ufff6\024\ufff6\025\ufff6\026\042\027\043\030\040\031" +
    "\037\032\045\033\044\001\002\000\022\006\053\024\046" +
    "\026\042\027\043\030\040\031\037\032\045\033\044\001" +
    "\002\000\030\006\ufff5\016\ufff5\020\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\001" +
    "\002\000\004\005\055\001\002\000\024\005\032\006\056" +
    "\007\020\012\033\023\031\034\007\035\034\036\023\037" +
    "\030\001\002\000\030\006\uffe6\016\uffe6\020\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\001\002\000\024\006\uffe3\016\uffe3\024\046\026\042" +
    "\027\043\030\040\031\037\032\045\033\044\001\002\000" +
    "\006\006\062\016\061\001\002\000\022\005\032\007\020" +
    "\012\033\023\031\034\007\035\034\036\023\037\030\001" +
    "\002\000\030\006\uffe5\016\uffe5\020\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\001" +
    "\002\000\024\006\uffe2\016\uffe2\024\046\026\042\027\043" +
    "\030\040\031\037\032\045\033\044\001\002\000\032\002" +
    "\ufffe\005\ufffe\007\ufffe\012\ufffe\014\ufffe\015\ufffe\021\ufffe" +
    "\023\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\001\002\000" +
    "\004\005\066\001\002\000\022\005\032\007\020\012\033" +
    "\023\031\034\007\035\034\036\023\037\030\001\002\000" +
    "\006\006\070\016\061\001\002\000\004\020\uffe4\001\002" +
    "\000\022\005\032\007\020\012\033\023\031\034\007\035" +
    "\034\036\023\037\030\001\002\000\022\006\074\024\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\001" +
    "\002\000\020\024\046\026\042\027\043\030\040\031\037" +
    "\032\045\033\044\001\002\000\004\010\075\001\002\000" +
    "\004\013\076\001\002\000\030\005\uffff\007\uffff\012\uffff" +
    "\014\uffff\015\uffff\021\uffff\023\uffff\034\uffff\035\uffff\036" +
    "\uffff\037\uffff\001\002\000\030\005\032\007\020\012\021" +
    "\014\100\015\010\021\014\023\031\034\007\035\015\036" +
    "\023\037\030\001\002\000\004\011\101\001\002\000\004" +
    "\013\102\001\002\000\030\005\uffff\007\uffff\012\uffff\014" +
    "\uffff\015\uffff\021\uffff\023\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\001\002\000\030\005\032\007\020\012\021\014" +
    "\104\015\010\021\014\023\031\034\007\035\015\036\023" +
    "\037\030\001\002\000\030\006\uffda\016\uffda\020\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\001\002\000\022\005\032\007\020\012\033\023" +
    "\031\034\007\035\034\036\023\037\030\001\002\000\006" +
    "\006\111\035\107\001\002\000\006\006\uffe8\016\uffe8\001" +
    "\002\000\006\006\117\016\116\001\002\000\004\017\112" +
    "\001\002\000\004\013\113\001\002\000\030\005\uffff\007" +
    "\uffff\012\uffff\014\uffff\015\uffff\021\uffff\023\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\001\002\000\030\005\032\007" +
    "\020\012\021\014\115\015\010\021\014\023\031\034\007" +
    "\035\015\036\023\037\030\001\002\000\004\020\uffea\001" +
    "\002\000\004\035\124\001\002\000\004\017\120\001\002" +
    "\000\004\013\121\001\002\000\030\005\uffff\007\uffff\012" +
    "\uffff\014\uffff\015\uffff\021\uffff\023\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\001\002\000\030\005\032\007\020\012" +
    "\021\014\123\015\010\021\014\023\031\034\007\035\015" +
    "\036\023\037\030\001\002\000\004\020\uffe9\001\002\000" +
    "\006\006\uffe7\016\uffe7\001\002\000\022\020\uffec\024\046" +
    "\026\042\027\043\030\040\031\037\032\045\033\044\001" +
    "\002\000\022\020\ufff7\024\046\026\042\027\043\030\040" +
    "\031\037\032\045\033\044\001\002\000\022\005\032\007" +
    "\020\012\033\023\031\034\007\035\034\036\023\037\030" +
    "\001\002\000\022\006\131\024\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\001\002\000\004\013\132" +
    "\001\002\000\030\005\uffff\007\uffff\012\uffff\014\uffff\015" +
    "\uffff\021\uffff\023\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\001\002\000\030\005\032\007\020\012\021\014\134\015" +
    "\010\021\014\023\031\034\007\035\015\036\023\037\030" +
    "\001\002\000\004\020\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\002\004\003\003\001\001\000\026\004" +
    "\024\005\023\006\026\007\021\011\016\012\015\013\011" +
    "\015\012\016\025\020\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\125\007\021\011\016\012\015\015\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\034\007\021\011\016\012\015\015\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\046" +
    "\001\001\000\014\005\051\007\021\011\016\012\015\015" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\050\007\021\011\016" +
    "\012\015\015\012\001\001\000\014\005\047\007\021\011" +
    "\016\012\015\015\012\001\001\000\004\010\046\001\001" +
    "\000\004\010\046\001\001\000\004\010\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\056\007\021" +
    "\011\016\012\015\014\057\015\012\001\001\000\002\001" +
    "\001\000\004\010\046\001\001\000\002\001\001\000\014" +
    "\005\062\007\021\011\016\012\015\015\012\001\001\000" +
    "\002\001\001\000\004\010\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\056\007\021\011\016\012" +
    "\015\014\066\015\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\072\007\021\011\016\012\071\015" +
    "\012\001\001\000\002\001\001\000\004\010\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\076\001" +
    "\001\000\026\004\024\005\023\006\026\007\021\011\016" +
    "\012\015\013\011\015\012\016\025\020\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\102\001\001" +
    "\000\026\004\024\005\023\006\026\007\021\011\016\012" +
    "\015\013\011\015\012\016\025\020\010\001\001\000\002" +
    "\001\001\000\014\005\124\007\021\011\016\012\015\015" +
    "\012\001\001\000\004\017\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\113\001\001\000\026\004\024\005\023\006\026" +
    "\007\021\011\016\012\015\013\011\015\012\016\025\020" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\121\001\001\000" +
    "\026\004\024\005\023\006\026\007\021\011\016\012\015" +
    "\013\011\015\012\016\025\020\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\046\001\001\000\004" +
    "\010\046\001\001\000\014\005\072\007\021\011\016\012" +
    "\127\015\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\132\001\001\000\026\004\024\005\023\006" +
    "\026\007\021\011\016\012\015\013\011\015\012\016\025" +
    "\020\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    // Connect this parser to a scanner!
    Parser(Scanner s){ super(s); }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= BLOCK 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstructionList b = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= 
            {
              InstructionList RESULT =null;
		 RESULT = new InstructionList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= BLOCK STATEMENT TERMINATOR 
            {
              InstructionList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InstructionList b = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 b.add(s); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= EXPRESSION 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignInstruction as = (AssignInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= LOOP 
            {
              Instruction RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LoopInstruction l = (LoopInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= FUNCTION_DEFINITION 
            {
              Instruction RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDefinitionInstruction fd = (FunctionDefinitionInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= PRINT_INSTRUCTION 
            {
              Instruction RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrintInstruction pi = (PrintInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= RETURN 
            {
              Instruction RESULT =null;
		 RESULT = new ReturnInstruction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= RETURN EXPRESSION 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReturnInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESSION ::= EXPRESSION ADD_SUB EXPRESSION 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticInstruction(ArithmeticOperator.getByString(as), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESSION ::= BRACKETS_LEFT EXPRESSION MULT_DIV EXPRESSION BRACKETS_RIGTH 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String md = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction e2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArithmeticInstruction(ArithmeticOperator.getByString(md), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESSION ::= BRACKETS_LEFT EXPRESSION BRACKETS_RIGTH 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESSION ::= NUMBER 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumberWrapper(Double.parseDouble(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESSION ::= IDENTIFIER 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GetVariableInstruction(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESSION ::= IFTHENELSE 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfThenElseInstruction t = (IfThenElseInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESSION ::= FUNCTION_CALL 
            {
              Instruction RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCallInstruction fc = (FunctionCallInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StringWrapper s = (StringWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESSION ::= BOOLEAN_CONDITION 
            {
              Instruction RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction bo = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESSION ::= UNDEFINED 
            {
              Instruction RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UndefinedWrapper(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASSIGNMENT ::= IDENTIFIER EQUAL EXPRESSION 
            {
              AssignInstruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignInstruction(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRING ::= CHARACTERS 
            {
              StringWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringWrapper(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION_DEFINITION ::= IDENTIFIER BRACKETS_LEFT BRACKETS_RIGTH ARROW CURLY_BRACKETS_LEFT BLOCK CURLY_BRACKETS_RIGTH 
            {
              FunctionDefinitionInstruction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList b = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDefinitionInstruction(fn, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEFINITION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION_DEFINITION ::= IDENTIFIER BRACKETS_LEFT PARAMETER_LIST BRACKETS_RIGTH ARROW CURLY_BRACKETS_LEFT BLOCK CURLY_BRACKETS_RIGTH 
            {
              FunctionDefinitionInstruction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList b = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDefinitionInstruction(fn, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEFINITION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETER_LIST ::= IDENTIFIER 
            {
              ParameterList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParameterList(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETER_LIST ::= PARAMETER_LIST SEPARATOR IDENTIFIER 
            {
              ParameterList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(v); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCTION_CALL ::= COLON IDENTIFIER BRACKETS_LEFT BRACKETS_RIGTH 
            {
              FunctionCallInstruction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionCallInstruction(fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCTION_CALL ::= COLON IDENTIFIER BRACKETS_LEFT ARGUMENT_LIST BRACKETS_RIGTH 
            {
              FunctionCallInstruction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallInstruction(fn, al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRINT_INSTRUCTION ::= COLON PRINT BRACKETS_LEFT ARGUMENT_LIST BRACKETS_RIGTH 
            {
              PrintInstruction RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintInstruction(al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT_INSTRUCTION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGUMENT_LIST ::= EXPRESSION 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENT_LIST ::= ARGUMENT_LIST SEPARATOR EXPRESSION 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 al.add(e); RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LOOP ::= WHILE BRACKETS_LEFT BOOLEAN_CONDITION BRACKETS_RIGTH CURLY_BRACKETS_LEFT BLOCK CURLY_BRACKETS_RIGTH 
            {
              LoopInstruction RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction bo = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList b = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LoopInstruction(bo, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BOOLEAN_OPERATOR ::= DOUBLE_EQUAL 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOLEAN_OPERATOR ::= NOT_EQUAL 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.NOT_EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOLEAN_OPERATOR ::= GREATER 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.GREATER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BOOLEAN_OPERATOR ::= SMALLER 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.SMALLER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOOLEAN_OPERATOR ::= GREATER_EQUAL 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.GREATER_EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOLEAN_OPERATOR ::= SMALLER_EQUAL 
            {
              BooleanOperator RESULT =null;
		 RESULT = BooleanOperator.SMALLER_EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFTHENELSE ::= IF BRACKETS_LEFT BOOLEAN_CONDITION BRACKETS_RIGTH THEN CURLY_BRACKETS_LEFT BLOCK CURLY_BRACKETS_RIGTH ELSE CURLY_BRACKETS_LEFT BLOCK CURLY_BRACKETS_RIGTH 
            {
              IfThenElseInstruction RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Instruction bo = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		InstructionList b1 = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList b2 = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfThenElseInstruction(bo, b1, b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFTHENELSE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOLEAN_CONDITION ::= BOOLEAN_VALUE 
            {
              Instruction RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanWrapper(Boolean.parseBoolean(bv)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_CONDITION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOLEAN_CONDITION ::= EXPRESSION BOOLEAN_OPERATOR EXPRESSION 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BooleanOperator cs = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction e2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanInstruction(cs, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_CONDITION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
